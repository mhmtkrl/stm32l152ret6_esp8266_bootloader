<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cave.CRC</name>
    </assembly>
    <members>
        <member name="T:Cave.CRC32">
            <summary>
            Provides a managed implementation of the Cyclic Redundancy Checksum with 32 bits.
            </summary>
        </member>
        <member name="F:Cave.CRC32.DefaultPolynomial">
            <summary>
            Provides the default polynomial
            (*the* standard CRC-32 polynomial, first popularized by Ethernet)
            x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x^1+x^0
            (little endian value).
            </summary>
        </member>
        <member name="P:Cave.CRC32.Default">
            <summary>
            Gets width=32 poly=0x04c11db7 init=0xffffffff refin=true refout=true xorout=0xffffffff check=0xcbf43926 residue=0xdebb20e3 name="CRC-32".
            </summary>
        </member>
        <member name="P:Cave.CRC32.AUTOSAR">
            <summary>
            Gets width=32 poly=0xf4acfb13 init=0xffffffff refin=true refout=true xorout=0xffffffff check=0x1697d06a residue=0x904cddbf name="CRC-32/AUTOSAR".
            </summary>
        </member>
        <member name="P:Cave.CRC32.BZIP2">
            <summary>
            Gets width=32 poly=0x04c11db7 init=0xffffffff refin=false refout=false xorout=0xffffffff check=0xfc891918 residue=0xc704dd7b name="CRC-32/BZIP2".
            </summary>
        </member>
        <member name="P:Cave.CRC32.C">
            <summary>
            Gets width=32 poly=0x1edc6f41 init=0xffffffff refin=true refout=true xorout=0xffffffff check=0xe3069283 residue=0xb798b438 name="CRC-32C".
            </summary>
        </member>
        <member name="P:Cave.CRC32.D">
            <summary>
            Gets width=32 poly=0xa833982b init=0xffffffff refin=true refout=true xorout=0xffffffff check=0x87315576 residue=0x45270551 name="CRC-32D".
            </summary>
        </member>
        <member name="P:Cave.CRC32.MPEG2">
            <summary>
            Gets width=32 poly=0x04c11db7 init=0xffffffff refin=false refout=false xorout=0x00000000 check=0x0376e6e7 residue=0x00000000 name="CRC-32/MPEG-2".
            </summary>
        </member>
        <member name="P:Cave.CRC32.POSIX">
            <summary>
            Gets width=32 poly=0x04c11db7 init=0x00000000 refin=false refout=false xorout=0xffffffff check=0x765e7680 residue=0xc704dd7b name="CRC-32/POSIX".
            </summary>
        </member>
        <member name="P:Cave.CRC32.CKSUM">
            <summary>
            Gets alias for <see cref="P:Cave.CRC32.POSIX"/>.
            </summary>
        </member>
        <member name="P:Cave.CRC32.Q">
            <summary>
            Gets width=32 poly=0x814141ab init=0x00000000 refin=false refout=false xorout=0x00000000 check=0x3010bf7f residue=0x00000000 name="CRC-32Q".
            </summary>
        </member>
        <member name="M:Cave.CRC32.Reflect32(System.UInt32)">
            <summary>Reflects 32 bits.</summary>
            <param name="x">The bits.</param>
            <returns>Returns a center reflection.</returns>
        </member>
        <member name="M:Cave.CRC32.CalculateTable">
            <summary>Calculates the table.</summary>
        </member>
        <member name="F:Cave.CRC32.Polynomial">
            <summary>The polynomial used to generate the table.</summary>
        </member>
        <member name="F:Cave.CRC32.Initializer">
            <summary>The initializer value.</summary>
        </member>
        <member name="F:Cave.CRC32.FinalXor">
            <summary>The final xor value.</summary>
        </member>
        <member name="F:Cave.CRC32.ReflectInput">
            <summary>The reflect input flag.</summary>
        </member>
        <member name="F:Cave.CRC32.ReflectOutput">
            <summary>The reflect output flag.</summary>
        </member>
        <member name="F:Cave.CRC32.Name">
            <summary>The name of the hash.</summary>
        </member>
        <member name="P:Cave.CRC32.Table">
            <summary>Gets the lookup table.</summary>
            <value>The table.</value>
        </member>
        <member name="P:Cave.CRC32.Value">
            <summary>Gets or sets the checksum computed so far.</summary>
        </member>
        <member name="P:Cave.CRC32.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="P:Cave.CRC32.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="M:Cave.CRC32.#ctor(Cave.CRC32)">
            <summary>Initializes a new instance of the <see cref="T:Cave.CRC32"/> class.</summary>
            <param name="blueprint">The blueprint to copy all properties from.</param>
            <exception cref="T:System.NotImplementedException">Throws an error if reflection is uneven.</exception>
        </member>
        <member name="M:Cave.CRC32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cave.CRC32"/> class.
            </summary>
        </member>
        <member name="M:Cave.CRC32.#ctor(System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cave.CRC32"/> class.
            </summary>
            <param name="poly">The polynom.</param>
            <param name="init">The initialize value.</param>
            <param name="reflectInput">if set to <c>true</c> [reflect input value] first.</param>
            <param name="reflectOutput">if set to <c>true</c> [reflect output value] first.</param>
            <param name="finalXor">The final xor value.</param>
            <param name="name">The name of the checksum.</param>
        </member>
        <member name="M:Cave.CRC32.Initialize">
            <summary>
            (Re-)initializes the <see cref="T:Cave.CRC32"/>.
            </summary>
        </member>
        <member name="M:Cave.CRC32.HashCore(System.Byte)">
            <summary>
            directly hashes one byte.
            </summary>
            <param name="b">The byte.</param>
        </member>
        <member name="M:Cave.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash for the specified data.
            </summary>
            <param name="array">Array of bytes to hash.</param>
            <param name="ibStart">Start index of data.</param>
            <param name="cbSize">Size of data in bytes.</param>
        </member>
        <member name="M:Cave.CRC32.HashFinal">
            <summary>
            Finalizes the hash computation, gets the resulting hash code in the systems byte order.
            </summary>
            <returns>Byte array of the hash.</returns>
        </member>
        <member name="M:Cave.CRC32.Reset">
            <summary>Resets the checksum to initialization state.</summary>
        </member>
        <member name="M:Cave.CRC32.Update(System.Int32)">
            <summary>Adds one byte to the checksum.</summary>
            <param name="value">the byte to add. Only the lowest 8 bits will be used.</param>
        </member>
        <member name="M:Cave.CRC32.Update(System.Byte[])">
            <summary>Updates the checksum with the specified byte array.</summary>
            <param name="buffer">The buffer containing the data.</param>
        </member>
        <member name="M:Cave.CRC32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>Updates the checksum with the specified byte array.</summary>
            <param name="buffer">The buffer containing the data.</param>
            <param name="offset">The offset in the buffer where the data starts.</param>
            <param name="count">the number of data bytes to add.</param>
        </member>
        <member name="M:Cave.CRC32.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cave.CRC32.Clone">
            <summary>Erstellt ein neues Objekt, das eine Kopie der aktuellen Instanz darstellt.</summary>
            <returns>Ein neues Objekt, das eine Kopie dieser Instanz darstellt.</returns>
        </member>
        <member name="T:Cave.CRC64">
            <summary>
            Provides a managed implementation of the Cyclic Redundancy Checksum with 64 bits.
            </summary>
        </member>
        <member name="F:Cave.CRC64.DefaultPolynomial">
            <summary>
            Provides the default polynomial.
            </summary>
        </member>
        <member name="P:Cave.CRC64.XZ">
            <summary>
            Gets width=64 poly=0x42f0e1eba9ea3693 init=0xffffffffffffffff refin=true refout=true xorout=0xffffffffffffffff check=0x995dc9bbdf1939fa residue=0x49958c9abd7d353f name="CRC-64/XZ".
            </summary>
        </member>
        <member name="P:Cave.CRC64.WE">
            <summary>
            Gets width=64 poly=0x42f0e1eba9ea3693 init=0xffffffffffffffff refin=false refout=false xorout=0xffffffffffffffff check=0x62ec59e3f1a4f00a residue=0xfcacbebd5931a992 name="CRC-64/WE".
            </summary>
        </member>
        <member name="P:Cave.CRC64.ECMA182">
            <summary>
            Gets width=64 poly=0x42f0e1eba9ea3693 init=0x0000000000000000 refin=false refout=false xorout=0x0000000000000000 check=0x6c40df5f0b497347 residue=0x0000000000000000 name="CRC-64".
            </summary>
        </member>
        <member name="M:Cave.CRC64.Reflect64(System.UInt64)">
            <summary>Reflects 64 bits.</summary>
            <param name="x">The bits.</param>
            <returns>Returns a center reflection.</returns>
        </member>
        <member name="M:Cave.CRC64.CalculateTable">
            <summary>Calculates the table.</summary>
        </member>
        <member name="F:Cave.CRC64.Polynomial">
            <summary>The polynomial used to generate the table.</summary>
        </member>
        <member name="F:Cave.CRC64.Initializer">
            <summary>The initializer value.</summary>
        </member>
        <member name="F:Cave.CRC64.FinalXor">
            <summary>The final xor value.</summary>
        </member>
        <member name="F:Cave.CRC64.ReflectInput">
            <summary>The reflect input flag.</summary>
        </member>
        <member name="F:Cave.CRC64.ReflectOutput">
            <summary>The reflect output flag.</summary>
        </member>
        <member name="P:Cave.CRC64.Name">
            <summary>Gets the name of the hash.</summary>
        </member>
        <member name="P:Cave.CRC64.Table">
            <summary>Gets the lookup table.</summary>
            <value>The table.</value>
        </member>
        <member name="P:Cave.CRC64.Value">
            <summary>Gets or sets the checksum computed so far.</summary>
        </member>
        <member name="P:Cave.CRC64.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="P:Cave.CRC64.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="M:Cave.CRC64.#ctor(Cave.CRC64)">
            <summary>Initializes a new instance of the <see cref="T:Cave.CRC64"/> class.</summary>
            <param name="blueprint">The blueprint to copy all properties from.</param>
            <exception cref="T:System.NotImplementedException">Throws an error if reflection is uneven.</exception>
        </member>
        <member name="M:Cave.CRC64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cave.CRC64"/> class.
            Creates a new CRC64.XZ:
            width=64 poly=0x42f0e1eba9ea3693 init=0xffffffffffffffff refin=true refout=true xorout=0xffffffffffffffff check=0x995dc9bbdf1939fa residue=0x49958c9abd7d353f name="CRC-64/XZ".
            </summary>
        </member>
        <member name="M:Cave.CRC64.#ctor(System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.UInt64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cave.CRC64"/> class.</summary>
            <param name="poly">The polynom.</param>
            <param name="init">The initialize value.</param>
            <param name="reflectInput">if set to <c>true</c> [reflect input value] first.</param>
            <param name="reflectOutput">if set to <c>true</c> [reflect output value] first.</param>
            <param name="finalXor">The final xor value.</param>
            <param name="name">The name of the checksum.</param>
        </member>
        <member name="M:Cave.CRC64.Initialize">
            <summary>
            (Re-)initializes the <see cref="T:Cave.CRC64"/>.
            </summary>
        </member>
        <member name="M:Cave.CRC64.HashCore(System.Byte)">
            <summary>
            directly hashes one byte.
            </summary>
            <param name="b">The byte.</param>
        </member>
        <member name="M:Cave.CRC64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash for the specified data. The caller needs to <see cref="M:Cave.CRC64.Initialize"/> the
            <see cref="T:Cave.CRC64"/> first and call <see cref="M:Cave.CRC64.HashFinal"/> afterwards to obtain the
            full hash code.
            </summary>
            <param name="array">Array of bytes to hash.</param>
            <param name="ibStart">Start index of data.</param>
            <param name="cbSize">Size of data in bytes.</param>
        </member>
        <member name="M:Cave.CRC64.HashFinal">
            <summary>
            Finalizes the hash computation obtains the resulting hash code in the systems byte order.
            </summary>
            <returns>Byte array of the hash.</returns>
        </member>
        <member name="M:Cave.CRC64.Reset">
            <summary>Resets the checksum to initialization state.</summary>
        </member>
        <member name="M:Cave.CRC64.Update(System.Int32)">
            <summary>Adds one byte to the checksum.</summary>
            <param name="value">the byte to add. Only the lowest 8 bits will be used.</param>
        </member>
        <member name="M:Cave.CRC64.Update(System.Byte[])">
            <summary>Updates the checksum with the specified byte array.</summary>
            <param name="buffer">The buffer containing the data.</param>
        </member>
        <member name="M:Cave.CRC64.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>Updates the checksum with the specified byte array.</summary>
            <param name="buffer">The buffer containing the data.</param>
            <param name="offset">The offset in the buffer where the data starts.</param>
            <param name="count">the number of data bytes to add.</param>
        </member>
        <member name="M:Cave.CRC64.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cave.CRC64.Clone">
            <summary>Erstellt ein neues Objekt, das eine Kopie der aktuellen Instanz darstellt.</summary>
            <returns>Ein neues Objekt, das eine Kopie dieser Instanz darstellt.</returns>
        </member>
        <member name="T:Cave.CRCCCITT16">
            <summary>
            Implements a fast implementation of the CRC-CCITT-16 algorithm for the polynomial 0x1021.
            </summary>
        </member>
        <member name="P:Cave.CRCCCITT16.Value">
            <summary>
            Gets or sets the checksum computed so far.
            </summary>
        </member>
        <member name="P:Cave.CRCCCITT16.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="M:Cave.CRCCCITT16.Initialize">
            <summary>
            Initializes an implementation of the HashAlgorithm class.
            </summary>
        </member>
        <member name="M:Cave.CRCCCITT16.Reset">
            <summary>
            Resets the checksum to initialization state.
            </summary>
        </member>
        <member name="M:Cave.CRCCCITT16.Update(System.Int32)">
            <summary>Adds one byte to the checksum.</summary>
            <param name="value">the byte to add. Only the lowest 8 bits will be used.</param>
        </member>
        <member name="M:Cave.CRCCCITT16.Update(System.Byte[])">
            <summary>Updates the checksum with the specified byte array.</summary>
            <param name="buffer">buffer an array of bytes.</param>
        </member>
        <member name="M:Cave.CRCCCITT16.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>Updates the checksum with the specified byte array.</summary>
            <param name="buffer">The buffer containing the data.</param>
            <param name="offset">The offset in the buffer where the data starts.</param>
            <param name="count">the number of data bytes to add.</param>
        </member>
        <member name="M:Cave.CRCCCITT16.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <remarks>
            This method is not called by application code.<br/>
            This abstract method performs the hash computation.Every write to the cryptographic stream object passes the data through this method.For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.
            </remarks>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Cave.CRCCCITT16.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <remarks>This method finalizes any partial computation and returns the correct hash value for the data stream.</remarks>
            <returns>The computed hash code.</returns>
        </member>
        <member name="P:Cave.CRCCCITT16.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="T:Cave.Hash">
            <summary>
            Provides thread safe hashing.
            </summary>
        </member>
        <member name="T:Cave.Hash.Type">
            <summary>
            Available hash types.
            </summary>
        </member>
        <member name="F:Cave.Hash.Type.None">
            <summary>The none</summary>
        </member>
        <member name="F:Cave.Hash.Type.CRC32">
            <summary>The crc32 hash algorithm</summary>
        </member>
        <member name="F:Cave.Hash.Type.CRC64">
            <summary>The crc64 hash algorithm</summary>
        </member>
        <member name="F:Cave.Hash.Type.MD5">
            <summary>The md5 hash algorithm</summary>
        </member>
        <member name="F:Cave.Hash.Type.SHA1">
            <summary>The sha1 hash algorithm</summary>
        </member>
        <member name="F:Cave.Hash.Type.SHA256">
            <summary>The sha256 hash algorithm</summary>
        </member>
        <member name="F:Cave.Hash.Type.SHA384">
            <summary>The sha384 hash algorithm</summary>
        </member>
        <member name="F:Cave.Hash.Type.SHA512">
            <summary>The sha512 hash algorithm</summary>
        </member>
        <member name="M:Cave.Hash.Create(Cave.Hash.Type)">
            <summary>Creates a hash of the specified type.</summary>
            <param name="type">The type.</param>
            <returns>Returns a new HashAlgorithm instance.</returns>
            <exception cref="T:System.NotImplementedException">Throws an exeption if hash type is unknown.</exception>
        </member>
        <member name="M:Cave.Hash.FromArray(Cave.Hash.Type,System.Byte[])">
            <summary>Obtains the hash code for a specified data array.</summary>
            <param name="type">The type.</param>
            <param name="data">The bytes to hash.</param>
            <returns>A new byte[] containing the hash for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">data.</exception>
        </member>
        <member name="M:Cave.Hash.FromArray(Cave.Hash.Type,System.Byte[],System.Int32,System.Int32)">
            <summary>Obtains the hash code for a specified data array.</summary>
            <param name="type">The type.</param>
            <param name="data">The byte array to hash.</param>
            <param name="index">The start index.</param>
            <param name="count">The number of bytes to hash.</param>
            <returns>A new byte[] containing the hash for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">data.</exception>
        </member>
        <member name="M:Cave.Hash.FromString(Cave.Hash.Type,System.String,System.Int32,System.Int32)">
            <summary>
            Obtains the hash code for a specified data string (using UTF-8 encoding).
            </summary>
            <param name="type">The type.</param>
            <param name="data">The string to hash.</param>
            <param name="index">The start index.</param>
            <param name="count">The number of chars to hash.</param>
            <returns>A new byte[] containing the hash for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">data.</exception>
        </member>
        <member name="M:Cave.Hash.FromString(Cave.Hash.Type,System.String)">
            <summary>Obtains the hash code for a specified data string (using UTF-8 encoding).</summary>
            <param name="type">The type.</param>
            <param name="data">The string to hash.</param>
            <returns>A new byte[] containing the hash for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">data.</exception>
        </member>
        <member name="M:Cave.Hash.FromStream(Cave.Hash.Type,System.IO.Stream)">
            <summary>
            Obtains the hash code for a specified <see cref="T:System.IO.Stream" /> string at the current position and
            reading to the end of the stream.
            </summary>
            <param name="type">The type.</param>
            <param name="stream">The stream to hash.</param>
            <returns>A new byte[] containing the hash for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">stream.</exception>
        </member>
        <member name="T:Cave.IChecksum`1">
            <summary>
            Interface to compute checksums on bytes/byte arrays.
            </summary>
            <typeparam name="T">Type of byte array.</typeparam>
        </member>
        <member name="M:Cave.IChecksum`1.Reset">
            <summary>
            Resets the checksum to initialization state.
            </summary>
        </member>
        <member name="P:Cave.IChecksum`1.Value">
            <summary>
            Gets the checksum computed so far.
            </summary>
        </member>
        <member name="M:Cave.IChecksum`1.Update(System.Int32)">
            <summary>Adds one byte to the checksum.</summary>
            <param name="value">the byte to add. Only the lowest 8 bits will be used.</param>
        </member>
        <member name="M:Cave.IChecksum`1.Update(System.Byte[])">
            <summary>Updates the checksum with the specified byte array.</summary>
            <param name="buffer">buffer an array of bytes.</param>
        </member>
        <member name="M:Cave.IChecksum`1.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>Updates the checksum with the specified byte array.</summary>
            <param name="buffer">The buffer containing the data.</param>
            <param name="offset">The offset in the buffer where the data starts.</param>
            <param name="count">the number of data bytes to add.</param>
        </member>
    </members>
</doc>
